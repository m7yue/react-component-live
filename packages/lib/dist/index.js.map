{"version":3,"sources":["../src/index.ts","../src/context-provider.tsx","../src/monaco-editor.tsx","../src/userWorker.ts","../src/preview.tsx","../src/component-live.tsx"],"sourcesContent":["export { ContextProvider, Context} from './context-provider'\nexport type { ContextProviderProps, ContextValue } from './context-provider'\n\nexport { MonacoEditor, type MonacoEditorProps } from './monaco-editor'\n\nexport { Preview, type PreviewProps } from './preview'\n\nexport { ReactComponentLive } from './component-live'\n\n","import React, { useMemo } from \"react\";\nimport { LiveProviderProps } from \"react-live\";\nimport * as monaco from \"monaco-editor\";\n\nimport TomorrowNightBlue from \"monaco-themes/themes/Tomorrow-Night-Blue.json\";\n\nexport type ContextValue = {\n  scope: LiveProviderProps[\"scope\"];\n  theme: monaco.editor.IStandaloneThemeData;\n  children?: React.ReactNode;\n};\n\nconst defaultContextValue = {\n  scope: {},\n  theme: TomorrowNightBlue as monaco.editor.IStandaloneThemeData,\n};\n\nexport const Context = React.createContext<ContextValue>(defaultContextValue);\n\nexport type ContextProviderProps = {\n  scope?: LiveProviderProps[\"scope\"];\n  theme?: monaco.editor.IStandaloneThemeData;\n  children?: React.ReactNode;\n};\n\nconst ContextProvider = (props: ContextProviderProps) => {\n  const { theme, scope } = props;\n\n  const contextValue = useMemo<ContextValue>(() => {\n    return {\n      scope: scope || defaultContextValue.scope,\n      theme: theme || defaultContextValue.theme,\n    };\n  }, [scope, theme]);\n\n  return (\n    <Context.Provider value={contextValue}>{props.children}</Context.Provider>\n  );\n};\n\nexport { ContextProvider };\n","import React, {\n  useRef,\n  useContext,\n  useEffect,\n  useImperativeHandle,\n  forwardRef,\n  ComponentPropsWithRef,\n} from \"react\";\nimport * as monaco from \"monaco-editor\";\nimport { type editor } from \"monaco-editor\";\n\nimport \"./userWorker\";\n\nimport { Context } from \"./context-provider\";\n\ntype IStandaloneEditorConstructionOptions =\n  editor.IStandaloneEditorConstructionOptions;\n\nexport type MonacoEditorProps = {\n  defaultValue?: string;\n  theme?:  monaco.editor.IStandaloneThemeData;\n  editorOptions?: editor.IStandaloneEditorConstructionOptions;\n} &  ComponentPropsWithRef<'div'>;\n\nconst defaultEditorOptions: IStandaloneEditorConstructionOptions = {\n  tabSize: 2,\n  lineNumbers: \"off\", // 行数信息\n  minimap: {\n    enabled: false,\n    size: \"proportional\",\n    showSlider: \"mouseover\",\n  },\n  showUnused: true,\n  useShadowDOM: true,\n  language: \"javascript\",\n};\n\nexport const MonacoEditor = forwardRef<\n  {\n    get editor(): monaco.editor.IStandaloneCodeEditor;\n  },\n  MonacoEditorProps\n>((props, ref) => {\n  const contextValue = useContext(Context);\n\n  const {\n    defaultValue = '',\n    editorOptions,\n    theme = contextValue.theme,\n    ...restProps\n  } = props;\n\n  const editor = useRef<monaco.editor.IStandaloneCodeEditor | null>(null);\n\n  const monacoEl = useRef(null);\n  \n  useImperativeHandle(ref, () => ({\n    get editor() {\n      return editor.current!;\n    },\n  }));\n\n  useEffect(() => {\n    if (monacoEl && !editor.current) {\n      monaco.editor.defineTheme(\"tomorrowNightBlue\", theme);\n      monaco.editor.setTheme(\"tomorrowNightBlue\");\n\n      editor.current = monaco.editor.create(monacoEl.current!, {\n        ...defaultEditorOptions,\n        ...editorOptions,\n        value: defaultValue,\n      });\n    }\n\n    return () => editor.current?.dispose();\n  }, [monacoEl]);\n\n  return <div style={{ width: 600, height: 600 } } {...restProps} ref={monacoEl}></div>;\n});\n","// @ts-nocheck\nimport * as monaco from 'monaco-editor';\nimport editorWorker from 'monaco-editor/esm/vs/editor/editor.worker?worker';\nimport jsonWorker from 'monaco-editor/esm/vs/language/json/json.worker?worker';\nimport cssWorker from 'monaco-editor/esm/vs/language/css/css.worker?worker';\nimport htmlWorker from 'monaco-editor/esm/vs/language/html/html.worker?worker';\nimport tsWorker from 'monaco-editor/esm/vs/language/typescript/ts.worker?worker';\n\n// @ts-ignore\nself.MonacoEnvironment = {\n\tgetWorker(_: any, label: string) {\n\t\tif (label === 'json') {\n\t\t\treturn new jsonWorker();\n\t\t}\n\t\tif (label === 'css' || label === 'scss' || label === 'less') {\n\t\t\treturn new cssWorker();\n\t\t}\n\t\tif (label === 'html' || label === 'handlebars' || label === 'razor') {\n\t\t\treturn new htmlWorker();\n\t\t}\n\t\tif (label === 'typescript' || label === 'javascript') {\n\t\t\treturn new tsWorker();\n\t\t}\n\t\treturn new editorWorker();\n\t}\n};\n\nmonaco.languages.typescript.typescriptDefaults.setEagerModelSync(true);\n","import React, { useContext, FC, ComponentPropsWithoutRef } from \"react\";\nimport { LiveProvider, LiveError, LivePreview, LiveProviderProps } from \"react-live\";\n\nimport { Context } from \"./context-provider\";\n\nexport type PreviewProps = {\n  code?: string;\n  scope?: LiveProviderProps['scope'];\n} & ComponentPropsWithoutRef<'div'>\n\nconst Preview: FC<PreviewProps> = (props) => {\n  const contextValue = useContext(Context);\n  const {\n    code,\n    scope = contextValue.scope,\n    ...restProps\n  } = props\n\n  return (\n    <>\n      <div {...restProps}>\n      <LiveProvider scope={scope} language={\"javascript\"} code={code}>\n        <LiveError />\n        <LivePreview />\n      </LiveProvider>\n      </div>\n    </>\n  );\n};\n\nexport { Preview };","import React, { useEffect, useRef, useState, useContext, FC } from \"react\";\nimport { ContextProvider, Context } from './context-provider'\nimport { MonacoEditor } from './monaco-editor'\nimport { Preview } from './preview'\n\nexport type LiveProps = {\n  defaultValue?: string\n}\n\nexport const ReactComponentLive: FC<LiveProps> = (props) => {\n  const monacoEditor = useRef<React.ElementRef<typeof MonacoEditor>>(null);\n  const contextValue = useContext(Context);\n  const scope = contextValue.scope;\n  const { defaultValue } = props\n\n  const [code, setCode] = useState('');\n\n  useEffect(() => {\n    if (monacoEditor.current) {\n      const editor = monacoEditor.current.editor;\n      editor.onDidBlurEditorText(() => {\n        setCode(editor.getValue());\n      });\n      setCode(monacoEditor.current.editor.getValue());\n    }\n  }, [monacoEditor]);\n\n  return (\n    <>\n      <ContextProvider scope={scope}>\n        <div style={{\n          display: \"flex\"\n        }}>\n          <MonacoEditor\n            defaultValue={defaultValue}\n            ref={monacoEditor}\n          />\n\n          <div style={{\n            width: 600,\n            height: 600,\n            overflow: \"auto\",\n            padding: 10,\n            boxSizing: \"border-box\",\n            background: \"lightskyblue\"\n          }}>\n            <Preview code={code}/>\n          </div>\n        </div>\n      </ContextProvider>\n    </>\n  );\n}"],"mappings":"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","names":["TomorrowNightBlue","React","import_react","monaco","jsonWorker","cssWorker","htmlWorker","tsWorker","editorWorker","editor","React","import_react","React","import_react","editor","React"]}